<?php

if (!function_exists('_money_format')) {
    /**
     * @param $value
     * @return string
     */
    function _money_format($value)
    {
        $value = (float) $value;

//        $currency = get_currency();
//        $position = Settings::get('financial.currency_position');
//        $format = Settings::get('financial.money_format');
//        $decimals = Settings::get('financial.decimals');

        $currency = 'Taka';
        $position = '3';
        $format = '3';
        $decimals = 2;

        $money = '';

        if ($position === '1') {
            $money .= $currency . ' ';
        }
//        elseif ($position == "2") $money .= $currency;

        if ($format === '2') {
            $thousandSep = '.';
            $decimalPoint = ',';
        } elseif ($format === '3') {
            $thousandSep = '';
            $decimalPoint = '.';
        } elseif ($format === '4') {
            $thousandSep = '';
            $decimalPoint = ',';
        } else {
            $thousandSep = ',';
            $decimalPoint = '.';
        }

        $money .= number_format($value, $decimals, $decimalPoint, $thousandSep);

        if ($position == '3') {
            $money .= ' ' . $currency;
        }

        return $money;
    }
}

if (!function_exists('_number_format')){
    /**
     * @param $value
     * @param int $decimal
     * @return string
     */
    function _number_format($value, $decimal = 2){
        $value = $value == null || is_object($value) ? 0 : $value;

        return number_format($value, $decimal);
    }
}

if (!function_exists('number_to_words')) {
    /**
     * @param $number
     * @return bool|mixed|null|string
     */
    function number_to_words($number)
    {
        $hyphen = '-';
        $conjunction = '  ';
        $separator = ' ';
        $negative = 'negative ';
        $decimal = ' and ';
        $dictionary = [
            0 => 'zero',
            1 => 'one',
            2 => 'two',
            3 => 'three',
            4 => 'four',
            5 => 'five',
            6 => 'six',
            7 => 'seven',
            8 => 'eight',
            9 => 'nine',
            10 => 'ten',
            11 => 'eleven',
            12 => 'twelve',
            13 => 'thirteen',
            14 => 'fourteen',
            15 => 'fifteen',
            16 => 'sixteen',
            17 => 'seventeen',
            18 => 'eighteen',
            19 => 'nineteen',
            20 => 'twenty',
            30 => 'thirty',
            40 => 'fourty',
            50 => 'fifty',
            60 => 'sixty',
            70 => 'seventy',
            80 => 'eighty',
            90 => 'ninety',
            100 => 'hundred',
            1000 => 'thousand',
            1000000 => 'lakh',
            1000000000 => 'crore',
            1000000000000 => 'trillion',
            1000000000000000 => 'quadrillion',
            1000000000000000000 => 'quintillion',
        ];

        if (!is_numeric($number)) {
            return false;
        }

        if (($number >= 0 && (int)$number < 0) || (int)$number < 0 - PHP_INT_MAX) {
            // overflow
            trigger_error(
                'convert_number_to_words only accepts numbers between -' . PHP_INT_MAX . ' and ' . PHP_INT_MAX,
                E_USER_WARNING
            );

            return false;
        }

        if ($number < 0) {
            return $negative . number_to_words(abs($number));
        }

        $string = $fraction = null;

        if (strpos($number, '.') !== false) {
            list($number, $fraction) = explode('.', $number);
        }

        switch (true) {
            case $number < 21:
                $string = $dictionary[$number];
                break;
            case $number < 100:
                $tens = ((int)($number / 10)) * 10;
                $units = $number % 10;
                $string = $dictionary[$tens];

                if ($units) {
                    $string .= $hyphen . $dictionary[$units];
                }
                break;
            case $number < 1000:
                $hundreds = $number / 100;
                $remainder = $number % 100;
                $string = $dictionary[$hundreds] . ' ' . $dictionary[100];

                if ($remainder) {
                    $string .= $conjunction . number_to_words($remainder);
                }
                break;
            default:
                $baseUnit = pow(1000, floor(log($number, 1000)));
                $numBaseUnits = (int)($number / $baseUnit);
                $remainder = $number % $baseUnit;
                $string = number_to_words($numBaseUnits) . ' ' . $dictionary[$baseUnit];

                if ($remainder) {
                    $string .= $remainder < 100 ? $conjunction : $separator;
                    $string .= number_to_words($remainder);
                }
                break;
        }

        if (null !== $fraction && is_numeric($fraction)) {
            $string .= $decimal;
            $words = [];
            foreach (str_split((string)$fraction) as $num) {
                $words[] = $dictionary[$num];
            }
            $string .= implode(' ', $words);
        }

        return $string;
    }
}

if (!function_exists('ordinal')) {
    /**
     * @param $number
     * @return string
     */
    function ordinal($number)
    {
        $ends = ['th', 'st', 'nd', 'rd', 'th', 'th', 'th', 'th', 'th', 'th'];
        $os = '';

        if ((($number % 100) >= 11) && (($number % 100) <= 13)) {
            $os = 'th';
        } else {
            $os = $ends[$number % 10];
        }

        return $number . ($number === 0 ? $os : '<sup>' . $os . '</sup>');
    }
}
